#include <sys/socket.h>
#include <sys/types.h>
#include <netdb.h>

//int socket(int domain, int type, int protocol);

int main(int argc, char **argv){

  struct addrinfo hints;   //Sin puntero porque lo vamos a inicializar
  struct addrinfo *res;   

  memset((void*) &hints, '\0', sizeof(struct addrinfo)); //Inicializa a 0 el struct enterito
  hints.ai_family = AF_INET; //Podr√≠a ser AF_UNSPEC
  hints.ai_socktype = SOCK_DGRAM; // DGRAM siempre es UDP

  int rc = getaddrinfo(argv[1], argv[2], &hints, &res);

  if (rc != 0) {
    std::cout << "error getaddrinfo(): " << gai_strerror(c) << std::enddl;
    return -1;
  }

  int sd = socket (res-> ai_addr, res-> ai_addrlen);
  
  bind (sd, res->ai_addr, res->ai_addrlen);
  //COMENTAR A PARTIR DE AQUI
  while (true){

    char buf[256]; 
    struct sockaddr src_addr;
    socklen_t addrlen;

    char host [NI_MAXHOST]; 
    char serv [NI_MAXSERV];
		
    ssize_t s = recvfrom(sd, buf, 255, 0, /*IP y puerto del otro extremo (variable de salida)*/ &src_addr, /*argumento de entrada/salida*/&addrlen);

    getnameinfo(src_addr, addrlen, host, NI_MAXHOST, serv, NI_MAXSERV, NI_NUMERICHOST | NI_NUMERICSERV);

    std::cout << "Conexion: " << host << ":" <<	serv << "\n";
    std::cout << "Mensaje: " << buf << std::endl;

    sendto(/*En este caso solo hay un canal*/ sd, buf, s, 0, &src_addr, addrlen);

  }


  return 0;

}

