Hay que hacer la parte de servidor y de cliente. En clase vamos a hacer la de servidor

En la parte cliente, cuando se hace una apertura de socket y luego hacemos un sendto(), se hace un bind implicitamente.

La estructura sockaddr *src_addr(salida de la función) son los datos de conexion del cliente. Este puntero está en
ssize_t recvform(...).

Respecto a los flags hay que mirarlo en el manual. Cuando los inicializamos con cero, la llamada es bloqueante, espera a recibir
un mensaje, se bloquea el thread.

Vamos a hacer servidores monohilo hoy. Tenemos que tener en cuenta si la arquitectura está en big endian o little endian.
Se muestran cuatro conversores de estas arquitecturas.



int main (int argc, char **argv) {
	struct addrinfo hints;
	struct addrinfo *res;

	memset((void*) &hints, '\0', sizeof(struct addrinfo));
	hints.ai_family = AF_INET;
	hints.ai_socktype = SOCK_DGRAM; // DGRAM siempre es UDP

	int rc = getaddrinfo(argv[1], argv[2], &hints, &res);

	if (rc != 0) {
		std::cout << "error getaddrinfo(): " << gai_strerror(c) << std::enddl;
		return -1;
	}

	int sd = socket(res->ai_addr, res->ai_addrlen);

	bind (sd, res->ai_addr, res->ai_addrlen);

	freeaddrinfo(res);

	while(true) {
		char buf[256];
		struct sockaddr src_addr;
		socklen_t addrlen;

		char host [NI_MAXHOST];
		char serv [NI_MAXSERV];
		
		ssize_t s = recvfrom(sd, buf, 255, 0, /*IP y puerto del otro extremo (variable de salida)*/ &src_addr, /*argumento de entrada/salida*/&addrlen);

		getnameinfo(src_addr, addrlen, host, NI_MAXHOST, serv, NI_MAXSERV, NI_NUMERICHOST | NI_NUMERICSERV);

		std::cout << "Conexion: " << host << ":" <<	serv << "\n";
		std::cout << "Mensaje: " << buf << std::endl;

		sendto(/*En este caso solo hay un canal*/ sd, buf, s, 0, &src_addr, addrlen);

	}
	return 0;
}

Como saber si se estan mandando mensajes
./udp localhost 7777
En el netstat miramos si hay puerto netstat -uan | grep 7777
Si en el otro extremo no hay nada es que no está  el socket.
Para mandar un mensaje hay que coger la IP y el puerto
nc localhost 7777
Hay un problema porque se ha intentado conectar por TCP en lugar de UDP.
¿Ha cambiado algo respecto a las conexiones?
netsat -u localhost 7777
HOLA
En el otro extremo si se ha hecho un bind para conectarse con el 7777.


CON TCP!!!!!!!!!!!!!!!
¿Cuál es el patrón típico?
Primero un socket y luego un bind. 
Listen publica las conexiones. Pone el socket en estado listen. Antes de la llamada de esta función, no se puede conectar al socket.
accept() bloquea y espera hints.
Después hacemos recv() (diferencia entre el thread que está escuchando y el cliente que se está conectando) y send().

Ahora el programa lo vamos a hacer con TCP:

int main (int argc, char **argv) {
	struct addrinfo hints;
	struct addrinfo *res;

	memset((void*) &hints, '\0', sizeof(struct addrinfo));
	hints.ai_family = AF_INET;
	hints.ai_socktype = SOCK_STREAM; // DGRAM siempre es UDP

	int rc = getaddrinfo(argv[1], argv[2], &hints, &res);

	if (rc != 0) {
		std::cout << "error getaddrinfo(): " << gai_strerror(c) << std::enddl;
		return -1;
	}

	int sd = socket(res->ai_addr, res->ai_addrlen);

	bind (sd, res->ai_addr, res->ai_addrlen);ç

	listen (sd, 15);

	freeaddrinfo(res);

	// Para una sola conexion
	struct sockaddr src_addr;
	socklen_t addrlen = sizeof (src_addr);
	int sd_src = accept (sd, &arc_adr, addr_len);

	std::cout << "Conexion: " << host << ":" <<	serv << "\n";


	while(true) {

		char buf[256];	
		
		ssize_t s = recv (sd_src, buf, 255, 0);

		if (s == 0) {
			close(sd_srd);
			break;
		}

		std::cout << "Mensaje: " << buf << std::endl;

		send (sd_src, buf, s, 0);
	}
	return 0;
}